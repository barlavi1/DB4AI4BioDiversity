# Generated by Django 4.1.5 on 2023-01-22 12:25

import database_site.functions
import database_site.models
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Behavior',
            fields=[
                ('behaviorid', models.AutoField(db_column='behaviorID', editable=False, primary_key=True, serialize=False)),
                ('behaviortype', models.CharField(blank=True, db_column='behaviorType', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('countyname', models.CharField(db_column='countyName', max_length=255)),
                ('countyPolygon', django.contrib.gis.db.models.fields.PolygonField(db_column='county', srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('eventid', models.AutoField(db_column='eventID', editable=False, primary_key=True, serialize=False)),
                ('samplingprotocol', models.CharField(blank=True, db_column='samplingProtocol', max_length=255, null=True)),
                ('eventdate', models.DateTimeField(blank=True, db_column='eventDate', editable=False, null=True)),
                ('eventremarks', models.CharField(blank=True, db_column='eventRemarks', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Lifestage',
            fields=[
                ('lifestageid', models.AutoField(db_column='lifeStageID', editable=False, primary_key=True, serialize=False)),
                ('lifestagetype', models.CharField(blank=True, db_column='lifeStageType', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('locationid', models.AutoField(db_column='locationID', primary_key=True, serialize=False)),
                ('decimallongtitude', models.DecimalField(blank=True, db_column='decimalLongtitude', decimal_places=8, max_digits=11, null=True, validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('decimallatitude', models.DecimalField(blank=True, db_column='decimalLatitude', decimal_places=8, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('coordinateuncertaintyinmeters', models.IntegerField(blank=True, db_column='coordinateUncertaintyInMeters', null=True)),
                ('locationname', models.CharField(db_column='locationName', max_length=255)),
                ('location_coords', django.contrib.gis.db.models.fields.PointField(db_column='location', editable=False, srid=4326)),
                ('county', models.ForeignKey(blank=True, db_column='county', null=True, on_delete=django.db.models.deletion.CASCADE, to='database_site.county')),
            ],
        ),
        migrations.CreateModel(
            name='Sex',
            fields=[
                ('sexid', models.AutoField(db_column='sexID', editable=False, primary_key=True, serialize=False)),
                ('sextype', models.CharField(blank=True, db_column='sexType', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('taxonid', models.IntegerField(db_column='taxonID', primary_key=True, serialize=False)),
                ('scientificname', models.CharField(blank=True, db_column='scientificName', max_length=255, null=True)),
                ('genericname', models.CharField(blank=True, db_column='genericName', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('filepath', models.FileField(storage=database_site.functions.OverwriteStorage(), upload_to=database_site.models.PathAndRename_Video('videos/'))),
                ('eventdate', models.DateTimeField(blank=True, db_column='eventDate', null=True)),
                ('videoid', models.AutoField(db_column='videoid', editable=False, primary_key=True, serialize=False)),
                ('cameraid', models.CharField(blank=True, db_column='cameraid', max_length=255, null=True)),
                ('samplingprotocol', models.CharField(blank=True, db_column='samplingProtocol', max_length=255, null=True)),
                ('comments', models.CharField(blank=True, db_column='eventRemarks', max_length=255, null=True)),
                ('locationid', models.ForeignKey(db_column='locationID', editable=False, on_delete=django.db.models.deletion.CASCADE, to='database_site.location')),
            ],
        ),
        migrations.CreateModel(
            name='SharedVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filepath', models.FileField(storage=database_site.functions.OverwriteStorage(), upload_to=database_site.models.PathAndRename_shared('videos_to_share/'))),
                ('videoid', models.ForeignKey(db_column='videoid', on_delete=django.db.models.deletion.CASCADE, to='database_site.video')),
            ],
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('sequenceid', models.AutoField(db_column='sequenceid', editable=False, primary_key=True, serialize=False)),
                ('videoid', models.ForeignKey(db_column='videoid', on_delete=django.db.models.deletion.CASCADE, to='database_site.video')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regionname', models.CharField(db_column='regionName', max_length=255)),
                ('regionPolygon', django.contrib.gis.db.models.fields.PolygonField(db_column='regionPolygob', srid=4326)),
                ('county', models.ForeignKey(db_column='county', default=None, on_delete=django.db.models.deletion.CASCADE, to='database_site.county')),
            ],
        ),
        migrations.CreateModel(
            name='Occurence',
            fields=[
                ('occurenceid', models.AutoField(db_column='occurenceID', editable=False, primary_key=True, serialize=False)),
                ('individualcount', models.IntegerField(db_column='individualCount', default=0)),
                ('behaviorid', models.ForeignKey(db_column='behaviorID', null=True, on_delete=django.db.models.deletion.CASCADE, to='database_site.behavior')),
                ('eventid', models.ForeignKey(db_column='eventID', null=True, on_delete=django.db.models.deletion.CASCADE, to='database_site.event')),
                ('lifestageid', models.ForeignKey(db_column='lifeStageID', null=True, on_delete=django.db.models.deletion.CASCADE, to='database_site.lifestage')),
                ('sexid', models.ForeignKey(db_column='sexID', null=True, on_delete=django.db.models.deletion.CASCADE, to='database_site.sex')),
                ('taxonid', models.ForeignKey(db_column='taxonID', null=True, on_delete=django.db.models.deletion.CASCADE, to='database_site.taxon')),
            ],
        ),
        migrations.AddField(
            model_name='location',
            name='region',
            field=models.ForeignKey(blank=True, db_column='region', null=True, on_delete=django.db.models.deletion.CASCADE, to='database_site.region'),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('imageid', models.AutoField(db_column='imageID', editable=False, primary_key=True, serialize=False)),
                ('filepath', models.ImageField(storage=database_site.functions.OverwriteStorage(), upload_to=database_site.models.PathAndRename_Image('images/'))),
                ('cameraid', models.CharField(blank=True, db_column='cameraid', max_length=255, null=True)),
                ('eventid', models.ForeignKey(db_column='eventID', on_delete=django.db.models.deletion.CASCADE, to='database_site.event')),
                ('sequenceid', models.ForeignKey(blank=True, db_column='sequenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='database_site.sequence')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='locationid',
            field=models.ForeignKey(db_column='locationID', editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='database_site.location'),
        ),
        migrations.CreateModel(
            name='Deployments',
            fields=[
                ('start', models.DateTimeField(db_column='start')),
                ('end', models.DateTimeField(db_column='end')),
                ('setupby', models.CharField(blank=True, db_column='setupBy', max_length=255, null=True)),
                ('cameraid', models.CharField(blank=True, db_column='cameraID', max_length=255, null=True)),
                ('cameramodel', models.CharField(blank=True, db_column='cameraModel', max_length=255, null=True)),
                ('camerainterval', models.IntegerField(blank=True, db_column='cameraInterval', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('cameraheight', models.IntegerField(blank=True, db_column='cameraHeight', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('cameratilt', models.IntegerField(blank=True, db_column='cameraTilt', null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('cameraheading', models.IntegerField(blank=True, db_column='cameraHeading', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(360)])),
                ('detectiondistance', models.IntegerField(blank=True, db_column='detectionDistance', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('timestampissues', models.BooleanField(blank=True, db_column='timestampIssues', null=True)),
                ('baituse', models.IntegerField(blank=True, choices=[('none', 'none'), ('scent', 'scent'), ('food', 'food'), ('visual', 'visual'), ('acoustic', 'acoustic'), ('other', 'other')], db_column='baitUse', null=True)),
                ('session', models.CharField(blank=True, max_length=255, null=True)),
                ('array', models.CharField(blank=True, max_length=255, null=True)),
                ('featuretype', models.CharField(blank=True, choices=[('none', 'none'), ('road paved', 'road paved'), ('road dirt', 'road dirt'), ('trail hiking', 'trail hiking'), ('trail game', 'trail game'), ('road underpass', 'road underpass'), ('road bridge', 'road bridge'), ('culvert', 'culvert'), ('burrow', 'burrow'), ('nest site', 'nest site'), ('carcass', 'carcass'), ('water source', 'water source'), ('fruiting tree', 'fruiting tree'), ('other', 'other')], db_column='featureType', default='none', max_length=255, null=True)),
                ('habitat', models.CharField(blank=True, max_length=255, null=True)),
                ('tags', models.CharField(blank=True, max_length=255, null=True)),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('deploymentid', models.AutoField(db_column='deploymentid', editable=False, primary_key=True, serialize=False)),
                ('locationid', models.ForeignKey(db_column='locationID', on_delete=django.db.models.deletion.CASCADE, to='database_site.location')),
            ],
        ),
        migrations.AddConstraint(
            model_name='occurence',
            constraint=models.UniqueConstraint(fields=('eventid', 'occurenceid'), name='unique_event_occurence_combination'),
        ),
    ]
