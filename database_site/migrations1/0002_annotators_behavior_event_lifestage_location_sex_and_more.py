# Generated by Django 4.1 on 2022-09-12 15:20

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('database_site', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotators',
            fields=[
                ('annotatorid', models.IntegerField(db_column='annotatorID', primary_key=True, serialize=False)),
                ('annotatorname', models.CharField(blank=True, db_column='annotatorName', max_length=255, null=True)),
                ('assumedexpertiselevel', models.FloatField(blank=True, db_column='assumedExpertiseLevel', null=True)),
                ('yearofbirth', models.DateField(blank=True, db_column='yearOfBirth', null=True)),
                ('annotatorprogram', models.CharField(blank=True, db_column='AnnotatorProgram', max_length=255, null=True)),
                ('version', models.CharField(blank=True, db_column='Version', max_length=255, null=True)),
                ('parameters', models.CharField(blank=True, db_column='Parameters', max_length=255, null=True)),
                ('annotatortype', models.CharField(blank=True, db_column='annotatorType', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Annotators',
            },
        ),
        migrations.CreateModel(
            name='Behavior',
            fields=[
                ('behaviorid', models.IntegerField(db_column='behaviorID', primary_key=True, serialize=False)),
                ('behaviortype', models.CharField(blank=True, db_column='behaviorType', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Behavior',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('eventid', models.AutoField(db_column='eventID', primary_key=True, serialize=False)),
                ('samplingprotocol', models.CharField(db_column='samplingProtocol', max_length=255)),
                ('eventdate', models.DateTimeField(blank=True, db_column='eventDate', null=True)),
                ('eventremarks', models.CharField(blank=True, db_column='eventRemarks', max_length=255, null=True)),
                ('supraeventid', models.IntegerField(blank=True, db_column='supraEventID', null=True)),
            ],
            options={
                'db_table': 'Event',
            },
        ),
        migrations.CreateModel(
            name='Lifestage',
            fields=[
                ('lifestageid', models.IntegerField(db_column='lifeStageID', primary_key=True, serialize=False)),
                ('lifestagetype', models.CharField(blank=True, db_column='lifeStageType', max_length=255, null=True)),
            ],
            options={
                'db_table': 'LifeStage',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('locationid', models.CharField(db_column='locationID', max_length=255, primary_key=True, serialize=False)),
                ('decimallatitude', models.FloatField(blank=True, db_column='decimalLatitude', null=True, validators=[django.core.validators.MaxValueValidator(90), django.core.validators.MinValueValidator(-90)])),
                ('decimallongtitude', models.FloatField(blank=True, db_column='decimalLongtitude', null=True, validators=[django.core.validators.MaxValueValidator(180), django.core.validators.MinValueValidator(-180)])),
                ('coordinateuncertaintyinmeters', models.IntegerField(blank=True, db_column='coordinateUncertaintyInMeters', null=True)),
                ('continen', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('countyi', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'Location',
                'ordering': ['locationid'],
            },
        ),
        migrations.CreateModel(
            name='Sex',
            fields=[
                ('sexid', models.IntegerField(db_column='sexID', primary_key=True, serialize=False)),
                ('sextype', models.CharField(blank=True, db_column='sexType', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Sex',
            },
        ),
        migrations.CreateModel(
            name='Tasks',
            fields=[
                ('taskid', models.IntegerField(db_column='taskID', primary_key=True, serialize=False)),
                ('taskname', models.CharField(blank=True, db_column='taskName', max_length=255, null=True)),
                ('taskdescription', models.CharField(blank=True, db_column='taskDescription', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Tasks',
            },
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('taxonid', models.IntegerField(db_column='taxonID', primary_key=True, serialize=False)),
                ('scientificname', models.CharField(blank=True, db_column='scientificName', max_length=255, null=True)),
                ('genericname', models.CharField(blank=True, db_column='genericName', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Taxon',
            },
        ),
        migrations.CreateModel(
            name='Ai',
            fields=[
                ('aiid', models.OneToOneField(db_column='aiID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='database_site.annotators')),
                ('aiversion', models.CharField(blank=True, db_column='aiVersion', max_length=255, null=True)),
                ('animal_threshold', models.FloatField(blank=True, db_column='Animal_Threshold', null=True)),
                ('classification_threshold', models.FloatField(blank=True, db_column='Classification_Threshold', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Occurence',
            fields=[
                ('occurenceid', models.IntegerField(db_column='occurenceID')),
                ('eventid', models.OneToOneField(db_column='eventID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='database_site.event')),
                ('individualcount', models.IntegerField(db_column='individualCount')),
                ('behaviorid', models.ForeignKey(db_column='behaviorID', on_delete=django.db.models.deletion.DO_NOTHING, to='database_site.behavior')),
                ('lifestageid', models.ForeignKey(db_column='lifeStageID', on_delete=django.db.models.deletion.DO_NOTHING, to='database_site.lifestage')),
                ('sexid', models.ForeignKey(db_column='sexID', on_delete=django.db.models.deletion.DO_NOTHING, to='database_site.sex')),
                ('taxonid', models.ForeignKey(db_column='taxonID', on_delete=django.db.models.deletion.DO_NOTHING, to='database_site.taxon')),
            ],
            options={
                'db_table': 'Occurence',
                'unique_together': {('eventid', 'occurenceid')},
            },
        ),
        migrations.AddField(
            model_name='event',
            name='locationid',
            field=models.ForeignKey(blank=True, db_column='locationID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='database_site.location'),
        ),
        migrations.CreateModel(
            name='Deployments',
            fields=[
                ('deploymentid', models.IntegerField(db_column='deploymentID', primary_key=True, serialize=False)),
                ('longitutde', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('coordinateuncertaintyinmeters', models.IntegerField(blank=True, db_column='coordinateUncertaintyInMeters', null=True)),
                ('start', models.DateTimeField(blank=True, null=True)),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('setupby', models.CharField(blank=True, db_column='setupBy', max_length=255, null=True)),
                ('cameraid', models.CharField(blank=True, db_column='cameraID', max_length=255, null=True)),
                ('camerainterval', models.IntegerField(blank=True, db_column='cameraInterval', null=True)),
                ('featuretype', models.CharField(blank=True, db_column='featureType', max_length=255, null=True)),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('locationid', models.ForeignKey(db_column='locationID', on_delete=django.db.models.deletion.DO_NOTHING, to='database_site.location')),
            ],
            options={
                'db_table': 'Deployments',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('sequenceid', models.OneToOneField(db_column='sequenceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='database_site.event')),
                ('capturemethod', models.CharField(blank=True, db_column='captureMethod', max_length=255, null=True)),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('filepath', models.CharField(blank=True, max_length=255, null=True)),
                ('filemediatype', models.CharField(blank=True, db_column='fileMediatype', max_length=255, null=True)),
                ('deploymentid', models.ForeignKey(db_column='deploymentID', on_delete=django.db.models.deletion.DO_NOTHING, to='database_site.deployments')),
            ],
            options={
                'db_table': 'Media',
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('observationid', models.IntegerField(db_column='observationID')),
                ('sequenceid', models.OneToOneField(db_column='sequenceID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='database_site.media')),
                ('timestamp', models.DateTimeField(blank=True, null=True)),
                ('observationtype', models.CharField(db_column='observationType', max_length=255)),
                ('deploymentid', models.ForeignKey(blank=True, db_column='deploymentID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='database_site.deployments')),
            ],
            options={
                'db_table': 'Observation',
                'unique_together': {('sequenceid', 'observationid')},
            },
        ),
        migrations.CreateModel(
            name='Grades',
            fields=[
                ('eventid', models.OneToOneField(db_column='eventID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='database_site.occurence')),
                ('grade', models.FloatField()),
                ('annotatorid', models.ForeignKey(db_column='annotatorID', on_delete=django.db.models.deletion.DO_NOTHING, to='database_site.annotators')),
                ('occurenceid', models.ForeignKey(db_column='occurenceID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='database_site.occurence')),
                ('taskid', models.ForeignKey(db_column='taskID', on_delete=django.db.models.deletion.DO_NOTHING, to='database_site.tasks')),
            ],
            options={
                'db_table': 'Grades',
                'unique_together': {('eventid', 'occurenceid', 'taskid', 'annotatorid')},
            },
        ),
    ]
